name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

        
      - name: Debug Information
        run: |
          echo "Logging in as ${{ github.actor }}"
          echo "Attempting to log in to ghcr.io"


      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PACKAGE_TOKEN }}

      - name: Build and push Docker images
        env:
          GITHUB_TOKEN: ${{ secrets.PACKAGE_TOKEN }}
          SPRING_PROFILES_ACTIVE: prod
          RENDER_POSTGRES_HOST: ${{ secrets.RENDER_POSTGRES_HOST }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        run: |
          # Convert repository name to lowercase
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Find the Dockerfile
          DOCKERFILE_PATH=$(find ./backend -name Dockerfile -o -name dockerfile)
          if [ -z "$DOCKERFILE_PATH" ]; then
            echo "Dockerfile not found in the backend directory or its subdirectories"
            exit 1
          fi
          
          # Extract the directory containing the Dockerfile
          DOCKER_CONTEXT=$(dirname "$DOCKERFILE_PATH")
          
           # Ensure application-prod.properties exists
          if [ ! -f "./backend/src/main/resources/application-prod.properties" ]; then
            echo "application-prod.properties not found"
            exit 1
          fi
          
          # Build and push the application image

          docker compose -f ./backend/prod-compose.yaml build app 
          docker tag ghcr.io/${REPO_NAME}:smart-v1 ghcr.io/${REPO_NAME}:smart-v1 
          docker push ghcr.io/${REPO_NAME}:smart-v1


      -  name: Deploy Application Image to Render
         uses: johnbeynon/render-deploy-action@v0.0.8
         with:
           service-id: ${{ secrets.RENDER_SERVICE_ID }}
           api-key: ${{ secrets.RENDER_API_KEY }}
           branch: main
           docker-image: ghcr.io/${{ github.repository }}:millio
           env-vars: |
             RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
             SPRING_PROFILES_ACTIVE=prod
             SPRING_DATA_SOURCE_URL=jdbc:postgresql://${{ secrets.RENDER_POSTGRES_HOST }}:5432/${{ secrets.POSTGRES_DB }}
             SPRING_DATA_SOURCE_USERNAME=${{ secrets.POSTGRES_USER }}
             SPRING_DATA_SOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
         env:
           RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}

